// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CONST A = - 1 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="ConstantBlock"];
1 -> 2[label="defs[0]"];
2[label="ConstantDefinition"];
3[label="A"];
2 -> 3[label="ident"];
2 -> 4[label="constant"];
4[label="SignedConstant"];
5[label="-"];
4 -> 5[label="sign"];
4 -> 6[label="value"];
6[label="UnsignedConstant"];
7[label="1"];
6 -> 7[label="value"];
}
"
`;

exports[`CONST A = - 1; B = + 5 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="ConstantBlock"];
1 -> 2[label="defs[0]"];
2[label="ConstantDefinition"];
3[label="A"];
2 -> 3[label="ident"];
2 -> 4[label="constant"];
4[label="SignedConstant"];
5[label="-"];
4 -> 5[label="sign"];
4 -> 6[label="value"];
6[label="UnsignedConstant"];
7[label="1"];
6 -> 7[label="value"];
1 -> 8[label="defs[1]"];
8[label="ConstantDefinition"];
9[label="B"];
8 -> 9[label="ident"];
8 -> 10[label="constant"];
10[label="SignedConstant"];
11[label="+"];
10 -> 11[label="sign"];
10 -> 12[label="value"];
12[label="UnsignedConstant"];
13[label="5"];
12 -> 13[label="value"];
}
"
`;

exports[`CONST a = 1; CONST b = 1e5 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="ConstantBlock"];
1 -> 2[label="defs[0]"];
2[label="ConstantDefinition"];
3[label="a"];
2 -> 3[label="ident"];
2 -> 4[label="constant"];
4[label="UnsignedConstant"];
5[label="1"];
4 -> 5[label="value"];
0 -> 6[label="blocks[1]"];
6[label="ConstantBlock"];
6 -> 7[label="defs[0]"];
7[label="ConstantDefinition"];
8[label="b"];
7 -> 8[label="ident"];
7 -> 9[label="constant"];
9[label="UnsignedConstant"];
10[label="1e5"];
9 -> 10[label="value"];
}
"
`;

exports[`CONST a = 1;;; 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="ConstantBlock"];
1 -> 2[label="defs[0]"];
2[label="ConstantDefinition"];
3[label="a"];
2 -> 3[label="ident"];
2 -> 4[label="constant"];
4[label="UnsignedConstant"];
5[label="1"];
4 -> 5[label="value"];
}
"
`;

exports[`CONST a = 1;;;TYPE t = (a,b,c,d);;; 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="ConstantBlock"];
1 -> 2[label="defs[0]"];
2[label="ConstantDefinition"];
3[label="a"];
2 -> 3[label="ident"];
2 -> 4[label="constant"];
4[label="UnsignedConstant"];
5[label="1"];
4 -> 5[label="value"];
0 -> 6[label="blocks[1]"];
6[label="TypeBlock"];
6 -> 7[label="defs[0]"];
7[label="TypeDefinition"];
8[label="t"];
7 -> 8[label="ident"];
7 -> 9[label="type"];
9[label="ScalarType"];
10[label="a"];
9 -> 10[label="types[0]"];
11[label="b"];
9 -> 11[label="types[1]"];
12[label="c"];
9 -> 12[label="types[2]"];
13[label="d"];
9 -> 13[label="types[3]"];
}
"
`;

exports[`Cпециальные значения распознаются корректно 1`] = `"NIL (1,1): NIL"`;

exports[`Cпециальные значения распознаются корректно 2`] = `"PACKED (1,5): PACKED"`;

exports[`Cпециальные значения распознаются корректно 3`] = `"OF (1,12): OF"`;

exports[`Cпециальные значения распознаются корректно 4`] = `"ARRAY (1,15): ARRAY"`;

exports[`Cпециальные значения распознаются корректно 5`] = `"FILE (1,21): FILE"`;

exports[`Cпециальные значения распознаются корректно 6`] = `"SET (1,26): SET"`;

exports[`Cпециальные значения распознаются корректно 7`] = `"RECORD (1,30): RECORD"`;

exports[`Cпециальные значения распознаются корректно 8`] = `"END (1,37): END"`;

exports[`Cпециальные значения распознаются корректно 9`] = `"TYPE (1,41): TYPE"`;

exports[`Cпециальные значения распознаются корректно 10`] = `"VAR (1,46): VAR"`;

exports[`Cпециальные значения распознаются корректно 11`] = `"CASE (1,50): CASE"`;

exports[`Cпециальные значения распознаются корректно 12`] = `"CONST (1,55): CONST"`;

exports[`TYPE t = (a,b,c,d);;;; 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="TypeBlock"];
1 -> 2[label="defs[0]"];
2[label="TypeDefinition"];
3[label="t"];
2 -> 3[label="ident"];
2 -> 4[label="type"];
4[label="ScalarType"];
5[label="a"];
4 -> 5[label="types[0]"];
6[label="b"];
4 -> 6[label="types[1]"];
7[label="c"];
4 -> 7[label="types[2]"];
8[label="d"];
4 -> 8[label="types[3]"];
}
"
`;

exports[`TYPE t = ^a 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="TypeBlock"];
1 -> 2[label="defs[0]"];
2[label="TypeDefinition"];
3[label="t"];
2 -> 3[label="ident"];
2 -> 4[label="type"];
4[label="PointerType"];
5[label="a"];
4 -> 5[label="value"];
}
"
`;

exports[`TYPE t = -1..{dsadasd}4 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="TypeBlock"];
1 -> 2[label="defs[0]"];
2[label="TypeDefinition"];
3[label="t"];
2 -> 3[label="ident"];
2 -> 4[label="type"];
4[label="SubrangeType"];
4 -> 5[label="start"];
5[label="SignedConstant"];
6[label="-"];
5 -> 6[label="sign"];
5 -> 7[label="value"];
7[label="UnsignedConstant"];
8[label="1"];
7 -> 8[label="value"];
4 -> 9[label="end"];
9[label="UnsignedConstant"];
10[label="4"];
9 -> 10[label="value"];
}
"
`;

exports[`TYPE t = ARRAY [a,b,c] OF m 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="TypeBlock"];
1 -> 2[label="defs[0]"];
2[label="TypeDefinition"];
3[label="t"];
2 -> 3[label="ident"];
2 -> 4[label="type"];
4[label="StructuredType"];
4 -> 5[label="packed"];
5[label="false"];
4 -> 6[label="type"];
6[label="ArrayType"];
7[label="a"];
6 -> 7[label="index_types[0]"];
8[label="b"];
6 -> 8[label="index_types[1]"];
9[label="c"];
6 -> 9[label="index_types[2]"];
10[label="m"];
6 -> 10[label="component_type"];
}
"
`;

exports[`TYPE t = FILE OF ARRAY [b,c] OF m 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="TypeBlock"];
1 -> 2[label="defs[0]"];
2[label="TypeDefinition"];
3[label="t"];
2 -> 3[label="ident"];
2 -> 4[label="type"];
4[label="StructuredType"];
4 -> 5[label="packed"];
5[label="false"];
4 -> 6[label="type"];
6[label="FileType"];
6 -> 7[label="type"];
7[label="StructuredType"];
7 -> 8[label="packed"];
8[label="false"];
7 -> 9[label="type"];
9[label="ArrayType"];
10[label="b"];
9 -> 10[label="index_types[0]"];
11[label="c"];
9 -> 11[label="index_types[1]"];
12[label="m"];
9 -> 12[label="component_type"];
}
"
`;

exports[`TYPE t = FILE OF FILE OF FILE OF t 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="TypeBlock"];
1 -> 2[label="defs[0]"];
2[label="TypeDefinition"];
3[label="t"];
2 -> 3[label="ident"];
2 -> 4[label="type"];
4[label="StructuredType"];
4 -> 5[label="packed"];
5[label="false"];
4 -> 6[label="type"];
6[label="FileType"];
6 -> 7[label="type"];
7[label="StructuredType"];
7 -> 8[label="packed"];
8[label="false"];
7 -> 9[label="type"];
9[label="FileType"];
9 -> 10[label="type"];
10[label="StructuredType"];
10 -> 11[label="packed"];
11[label="false"];
10 -> 12[label="type"];
12[label="FileType"];
13[label="t"];
12 -> 13[label="type"];
}
"
`;

exports[`TYPE t = SET OF 1..2 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="TypeBlock"];
1 -> 2[label="defs[0]"];
2[label="TypeDefinition"];
3[label="t"];
2 -> 3[label="ident"];
2 -> 4[label="type"];
4[label="StructuredType"];
4 -> 5[label="packed"];
5[label="false"];
4 -> 6[label="type"];
6[label="SetType"];
6 -> 7[label="base_type"];
7[label="SubrangeType"];
7 -> 8[label="start"];
8[label="UnsignedConstant"];
9[label="1"];
8 -> 9[label="value"];
7 -> 10[label="end"];
10[label="UnsignedConstant"];
11[label="2"];
10 -> 11[label="value"];
}
"
`;

exports[`TYPE t = a (* графический и текстовый дисплеи *) 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="TypeBlock"];
1 -> 2[label="defs[0]"];
2[label="TypeDefinition"];
3[label="t"];
2 -> 3[label="ident"];
4[label="a"];
2 -> 4[label="type"];
}
"
`;

exports[`a 123 (*323*()(

)*) 1e15 1`] = `"IDENTIFIER (1,1): a"`;

exports[`a 123 (*323*()(

)*) 1e15 2`] = `"UNSIGNED_NUMBER (1,3): 123"`;

exports[`a 123 (*323*()(

)*) 1e15 3`] = `"UNSIGNED_NUMBER (1,22): 1e15"`;

exports[`a 123 (*323*()()*) 1e15 1`] = `"IDENTIFIER (1,1): a"`;

exports[`a 123 (*323*()()*) 1e15 2`] = `"UNSIGNED_NUMBER (1,3): 123"`;

exports[`a 123 (*323*()()*) 1e15 3`] = `"UNSIGNED_NUMBER (1,20): 1e15"`;

exports[`a 123 {232 * 3\\

} 1e15 1`] = `"IDENTIFIER (1,1): a"`;

exports[`a 123 {232 * 3\\

} 1e15 2`] = `"UNSIGNED_NUMBER (1,3): 123"`;

exports[`a 123 {232 * 3\\

} 1e15 3`] = `"UNSIGNED_NUMBER (1,20): 1e15"`;

exports[`input.txt 1`] = `
"digraph graph1 {
0[label="Program"];
0 -> 1[label="blocks[0]"];
1[label="TypeBlock"];
1 -> 2[label="defs[0]"];
2[label="TypeDefinition"];
3[label="Coords"];
2 -> 3[label="ident"];
2 -> 4[label="type"];
4[label="StructuredType"];
4 -> 5[label="packed"];
5[label="false"];
4 -> 6[label="type"];
6[label="RecordType"];
6 -> 7[label="field_list"];
7[label="FieldList"];
7 -> 8[label="fixed_part"];
8[label="RecordFixedPart"];
8 -> 9[label="sections[0]"];
9[label="RecordSection"];
10[label="x"];
9 -> 10[label="idents[0]"];
11[label="y"];
9 -> 11[label="idents[1]"];
12[label="INTEGER"];
9 -> 12[label="type"];
7 -> 13[label="variant_part"];
13[label="null"];
0 -> 14[label="blocks[1]"];
14[label="ConstantBlock"];
14 -> 15[label="defs[0]"];
15[label="ConstantDefinition"];
16[label="MaxPoints"];
15 -> 16[label="ident"];
15 -> 17[label="constant"];
17[label="UnsignedConstant"];
18[label="100"];
17 -> 18[label="value"];
0 -> 19[label="blocks[2]"];
19[label="TypeBlock"];
19 -> 20[label="defs[0]"];
20[label="TypeDefinition"];
21[label="CoordsVector"];
20 -> 21[label="ident"];
20 -> 22[label="type"];
22[label="StructuredType"];
22 -> 23[label="packed"];
23[label="false"];
22 -> 24[label="type"];
24[label="ArrayType"];
24 -> 25[label="index_types[0]"];
25[label="SubrangeType"];
25 -> 26[label="start"];
26[label="UnsignedConstant"];
27[label="1"];
26 -> 27[label="value"];
25 -> 28[label="end"];
28[label="UnsignedConstant"];
29[label="MaxPoints"];
28 -> 29[label="value"];
30[label="Coords"];
24 -> 30[label="component_type"];
0 -> 31[label="blocks[3]"];
31[label="ConstantBlock"];
31 -> 32[label="defs[0]"];
32[label="ConstantDefinition"];
33[label="Heigh"];
32 -> 33[label="ident"];
32 -> 34[label="constant"];
34[label="UnsignedConstant"];
35[label="480"];
34 -> 35[label="value"];
31 -> 36[label="defs[1]"];
36[label="ConstantDefinition"];
37[label="Width"];
36 -> 37[label="ident"];
36 -> 38[label="constant"];
38[label="UnsignedConstant"];
39[label="640"];
38 -> 39[label="value"];
31 -> 40[label="defs[2]"];
40[label="ConstantDefinition"];
41[label="Lines"];
40 -> 41[label="ident"];
40 -> 42[label="constant"];
42[label="UnsignedConstant"];
43[label="24"];
42 -> 43[label="value"];
31 -> 44[label="defs[3]"];
44[label="ConstantDefinition"];
45[label="Columns"];
44 -> 45[label="ident"];
44 -> 46[label="constant"];
46[label="UnsignedConstant"];
47[label="80"];
46 -> 47[label="value"];
0 -> 48[label="blocks[4]"];
48[label="TypeBlock"];
48 -> 49[label="defs[0]"];
49[label="TypeDefinition"];
50[label="BaseColor"];
49 -> 50[label="ident"];
49 -> 51[label="type"];
51[label="ScalarType"];
52[label="red"];
51 -> 52[label="types[0]"];
53[label="green"];
51 -> 53[label="types[1]"];
54[label="blue"];
51 -> 54[label="types[2]"];
55[label="highlited"];
51 -> 55[label="types[3]"];
48 -> 56[label="defs[1]"];
56[label="TypeDefinition"];
57[label="Color"];
56 -> 57[label="ident"];
56 -> 58[label="type"];
58[label="StructuredType"];
58 -> 59[label="packed"];
59[label="false"];
58 -> 60[label="type"];
60[label="SetType"];
61[label="BaseColor"];
60 -> 61[label="base_type"];
48 -> 62[label="defs[2]"];
62[label="TypeDefinition"];
63[label="GraphicScreen"];
62 -> 63[label="ident"];
62 -> 64[label="type"];
64[label="StructuredType"];
64 -> 65[label="packed"];
65[label="false"];
64 -> 66[label="type"];
66[label="ArrayType"];
66 -> 67[label="index_types[0]"];
67[label="SubrangeType"];
67 -> 68[label="start"];
68[label="UnsignedConstant"];
69[label="1"];
68 -> 69[label="value"];
67 -> 70[label="end"];
70[label="UnsignedConstant"];
71[label="Heigh"];
70 -> 71[label="value"];
66 -> 72[label="component_type"];
72[label="StructuredType"];
72 -> 73[label="packed"];
73[label="false"];
72 -> 74[label="type"];
74[label="ArrayType"];
74 -> 75[label="index_types[0]"];
75[label="SubrangeType"];
75 -> 76[label="start"];
76[label="UnsignedConstant"];
77[label="1"];
76 -> 77[label="value"];
75 -> 78[label="end"];
78[label="UnsignedConstant"];
79[label="Width"];
78 -> 79[label="value"];
80[label="Color"];
74 -> 80[label="component_type"];
48 -> 81[label="defs[3]"];
81[label="TypeDefinition"];
82[label="TextScreen"];
81 -> 82[label="ident"];
81 -> 83[label="type"];
83[label="StructuredType"];
83 -> 84[label="packed"];
84[label="false"];
83 -> 85[label="type"];
85[label="ArrayType"];
85 -> 86[label="index_types[0]"];
86[label="SubrangeType"];
86 -> 87[label="start"];
87[label="UnsignedConstant"];
88[label="1"];
87 -> 88[label="value"];
86 -> 89[label="end"];
89[label="UnsignedConstant"];
90[label="Lines"];
89 -> 90[label="value"];
85 -> 91[label="component_type"];
91[label="StructuredType"];
91 -> 92[label="packed"];
92[label="false"];
91 -> 93[label="type"];
93[label="ArrayType"];
93 -> 94[label="index_types[0]"];
94[label="SubrangeType"];
94 -> 95[label="start"];
95[label="UnsignedConstant"];
96[label="1"];
95 -> 96[label="value"];
94 -> 97[label="end"];
97[label="UnsignedConstant"];
98[label="Columns"];
97 -> 98[label="value"];
93 -> 99[label="component_type"];
99[label="StructuredType"];
99 -> 100[label="packed"];
100[label="false"];
99 -> 101[label="type"];
101[label="RecordType"];
101 -> 102[label="field_list"];
102[label="FieldList"];
102 -> 103[label="fixed_part"];
103[label="RecordFixedPart"];
103 -> 104[label="sections[0]"];
104[label="RecordSection"];
105[label="Symbol"];
104 -> 105[label="idents[0]"];
106[label="CHAR"];
104 -> 106[label="type"];
103 -> 107[label="sections[1]"];
107[label="RecordSection"];
108[label="SymColor"];
107 -> 108[label="idents[0]"];
109[label="Color"];
107 -> 109[label="type"];
103 -> 110[label="sections[2]"];
110[label="RecordSection"];
111[label="BackColor"];
110 -> 111[label="idents[0]"];
112[label="Color"];
110 -> 112[label="type"];
102 -> 113[label="variant_part"];
113[label="null"];
0 -> 114[label="blocks[5]"];
114[label="TypeBlock"];
114 -> 115[label="defs[0]"];
115[label="TypeDefinition"];
116[label="Domain"];
115 -> 116[label="ident"];
115 -> 117[label="type"];
117[label="ScalarType"];
118[label="Ident"];
117 -> 118[label="types[0]"];
119[label="IntNumber"];
117 -> 119[label="types[1]"];
120[label="RealNumber"];
117 -> 120[label="types[2]"];
114 -> 121[label="defs[1]"];
121[label="TypeDefinition"];
122[label="Token"];
121 -> 122[label="ident"];
121 -> 123[label="type"];
123[label="StructuredType"];
123 -> 124[label="packed"];
124[label="false"];
123 -> 125[label="type"];
125[label="RecordType"];
125 -> 126[label="field_list"];
126[label="FieldList"];
126 -> 127[label="fixed_part"];
127[label="RecordFixedPart"];
127 -> 128[label="sections[0]"];
128[label="RecordSection"];
129[label="fragment"];
128 -> 129[label="idents[0]"];
128 -> 130[label="type"];
130[label="StructuredType"];
130 -> 131[label="packed"];
131[label="false"];
130 -> 132[label="type"];
132[label="RecordType"];
132 -> 133[label="field_list"];
133[label="FieldList"];
133 -> 134[label="fixed_part"];
134[label="RecordFixedPart"];
134 -> 135[label="sections[0]"];
135[label="RecordSection"];
136[label="start"];
135 -> 136[label="idents[0]"];
137[label="following"];
135 -> 137[label="idents[1]"];
135 -> 138[label="type"];
138[label="StructuredType"];
138 -> 139[label="packed"];
139[label="false"];
138 -> 140[label="type"];
140[label="RecordType"];
140 -> 141[label="field_list"];
141[label="FieldList"];
141 -> 142[label="fixed_part"];
142[label="RecordFixedPart"];
142 -> 143[label="sections[0]"];
143[label="RecordSection"];
144[label="row"];
143 -> 144[label="idents[0]"];
145[label="col"];
143 -> 145[label="idents[1]"];
146[label="INTEGER"];
143 -> 146[label="type"];
141 -> 147[label="variant_part"];
147[label="null"];
133 -> 148[label="variant_part"];
148[label="null"];
126 -> 149[label="variant_part"];
149[label="RecordVariantPart"];
150[label="tokType"];
149 -> 150[label="tag_field"];
151[label="Domain"];
149 -> 151[label="type_ident"];
149 -> 152[label="variants[0]"];
152[label="RecordVariant"];
152 -> 153[label="const_label_list"];
153[label="CaseLabelList"];
154[label="Ident"];
153 -> 154[label="list[0]"];
152 -> 155[label="list"];
155[label="FieldList"];
155 -> 156[label="fixed_part"];
156[label="RecordFixedPart"];
156 -> 157[label="sections[0]"];
157[label="RecordSection"];
158[label="name"];
157 -> 158[label="idents[0]"];
157 -> 159[label="type"];
159[label="StructuredType"];
159 -> 160[label="packed"];
160[label="false"];
159 -> 161[label="type"];
161[label="ArrayType"];
161 -> 162[label="index_types[0]"];
162[label="SubrangeType"];
162 -> 163[label="start"];
163[label="UnsignedConstant"];
164[label="1"];
163 -> 164[label="value"];
162 -> 165[label="end"];
165[label="UnsignedConstant"];
166[label="32"];
165 -> 166[label="value"];
167[label="CHAR"];
161 -> 167[label="component_type"];
155 -> 168[label="variant_part"];
168[label="null"];
149 -> 169[label="variants[1]"];
169[label="RecordVariant"];
169 -> 170[label="const_label_list"];
170[label="CaseLabelList"];
171[label="IntNumber"];
170 -> 171[label="list[0]"];
169 -> 172[label="list"];
172[label="FieldList"];
172 -> 173[label="fixed_part"];
173[label="RecordFixedPart"];
173 -> 174[label="sections[0]"];
174[label="RecordSection"];
175[label="intval"];
174 -> 175[label="idents[0]"];
176[label="INTEGER"];
174 -> 176[label="type"];
172 -> 177[label="variant_part"];
177[label="null"];
149 -> 178[label="variants[2]"];
178[label="RecordVariant"];
178 -> 179[label="const_label_list"];
179[label="CaseLabelList"];
180[label="RealNumber"];
179 -> 180[label="list[0]"];
178 -> 181[label="list"];
181[label="FieldList"];
181 -> 182[label="fixed_part"];
182[label="RecordFixedPart"];
182 -> 183[label="sections[0]"];
183[label="RecordSection"];
184[label="realval"];
183 -> 184[label="idents[0]"];
185[label="REAL"];
183 -> 185[label="type"];
181 -> 186[label="variant_part"];
186[label="null"];
114 -> 187[label="defs[2]"];
187[label="TypeDefinition"];
188[label="Year"];
187 -> 188[label="ident"];
187 -> 189[label="type"];
189[label="SubrangeType"];
189 -> 190[label="start"];
190[label="UnsignedConstant"];
191[label="1900"];
190 -> 191[label="value"];
189 -> 192[label="end"];
192[label="UnsignedConstant"];
193[label="2050"];
192 -> 193[label="value"];
114 -> 194[label="defs[3]"];
194[label="TypeDefinition"];
195[label="List"];
194 -> 195[label="ident"];
194 -> 196[label="type"];
196[label="StructuredType"];
196 -> 197[label="packed"];
197[label="false"];
196 -> 198[label="type"];
198[label="RecordType"];
198 -> 199[label="field_list"];
199[label="FieldList"];
199 -> 200[label="fixed_part"];
200[label="RecordFixedPart"];
200 -> 201[label="sections[0]"];
201[label="RecordSection"];
202[label="value"];
201 -> 202[label="idents[0]"];
203[label="Token"];
201 -> 203[label="type"];
200 -> 204[label="sections[1]"];
204[label="RecordSection"];
205[label="next"];
204 -> 205[label="idents[0]"];
204 -> 206[label="type"];
206[label="PointerType"];
207[label="List"];
206 -> 207[label="value"];
199 -> 208[label="variant_part"];
208[label="null"];
}
"
`;

exports[`Идентификатор распознается 1`] = `"IDENTIFIER (1,1): testCounter1"`;

exports[`Именованные специальные значения распознаются корректно 1`] = `"LPAREN (1,1): ("`;

exports[`Именованные специальные значения распознаются корректно 2`] = `"RPAREN (1,3): )"`;

exports[`Именованные специальные значения распознаются корректно 3`] = `"COMMA (1,5): ,"`;

exports[`Именованные специальные значения распознаются корректно 4`] = `"POINTS (1,7): .."`;

exports[`Именованные специальные значения распознаются корректно 5`] = `"CARET (1,10): ^"`;

exports[`Именованные специальные значения распознаются корректно 6`] = `"PLUS (1,12): +"`;

exports[`Именованные специальные значения распознаются корректно 7`] = `"MINUS (1,14): -"`;

exports[`Именованные специальные значения распознаются корректно 8`] = `"LBRACKET (1,16): ["`;

exports[`Именованные специальные значения распознаются корректно 9`] = `"RBRACKET (1,18): ]"`;

exports[`Именованные специальные значения распознаются корректно 10`] = `"EQUAL (1,20): ="`;

exports[`Именованные специальные значения распознаются корректно 11`] = `"COLON (1,22): :"`;

exports[`Именованные специальные значения распознаются корректно 12`] = `"SEMICOLON (1,24): ;"`;

exports[`Конец строки распознается 1`] = `"EOF (-1,-1): "`;

exports[`Распознается самая длинная лексема 1`] = `"IDENTIFIER (1,1): VARCHAR"`;

exports[`Столбцы считаются корректно 1`] = `"UNSIGNED_NUMBER (1,3): 1234"`;

exports[`Строки распознаются 1`] = `"STRING (1,1): 'adsas'"`;

exports[`Строки распознаются 2`] = `"STRING (1,9): 'hello world!'"`;

exports[`Строки считаются после \\n корректно 1`] = `"UNSIGNED_NUMBER (4,5): 1234"`;

exports[`Строки считаются после \\r\\n корректно 1`] = `"UNSIGNED_NUMBER (2,1): 1234"`;

exports[`Управляющие символы в строках не распознаются 1`] = `"ERROR (1,1): "`;

exports[`Управляющие символы в строках не распознаются 2`] = `"IDENTIFIER (2,1): sdfsd"`;

exports[`Управляющие символы в строках не распознаются 3`] = `"ERROR (2,6): "`;

exports[`Целые беззнаковые числа распознаются 1`] = `"UNSIGNED_NUMBER (1,1): 011010"`;

exports[`Целые беззнаковые числа распознаются 2`] = `"UNSIGNED_NUMBER (1,8): 123"`;

exports[`Целые беззнаковые числа распознаются 3`] = `"UNSIGNED_NUMBER (1,12): 456"`;

exports[`Целые беззнаковые числа распознаются 4`] = `"UNSIGNED_NUMBER (1,16): 1"`;

exports[`Целые беззнаковые числа распознаются 5`] = `"UNSIGNED_NUMBER (1,18): 0"`;

exports[`Числа с плавающей точкой распознаются 1`] = `"UNSIGNED_NUMBER (1,1): 1E+11"`;

exports[`Числа с плавающей точкой распознаются 2`] = `"UNSIGNED_NUMBER (1,7): 42E-11"`;

exports[`Числа с плавающей точкой распознаются 3`] = `"UNSIGNED_NUMBER (1,14): 42E11"`;

exports[`Числа с плавающей точкой распознаются 4`] = `"UNSIGNED_NUMBER (1,20): 42.11E+11"`;

exports[`Числа с плавающей точкой распознаются 5`] = `"UNSIGNED_NUMBER (1,30): 42.11E-11"`;

exports[`Числа с плавающей точкой распознаются 6`] = `"UNSIGNED_NUMBER (1,40): 42.11E11"`;
